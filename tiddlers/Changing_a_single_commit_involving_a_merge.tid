created: 20150606004932529
modified: 20150606055934225
tags: Answers
title: Changing a single commit involving a merge
type: text/vnd.tiddlywiki

\define git-cmd(branch)
```sh
git rebase -p --onto $(git rev-parse nonce) HEAD^ $branch$
```
\end

Oh dear. This is going to get a little complicated. It should all work out, though. You will need to use a {{nonce}} branch as a placeholder. I will call the nonce branch "nonce" in the following example. However, you may use any branch name that is not currently in use. You can delete it immediately after you are done.

!! Identify the SHA of the commit you wish to modify.

{{FindingACommit}}

!! Remember the name of the branch you are currently on

The line with a star on it in the `git branch` output is the branch you are currently on. To make things clearer enter in the branch name your interested in: <$edit-text tiddler="$:/data/BranchName" field="branch"/>

!! Create and checkout a nonce branch pointing at that commit.

```sh
git checkout -b nonce SHA
```

Obviously replace "SHA" with the reference you want to modify.

!! Modify the commit

You need to get the index into the correct state you wish the commit to reflect. If you are changing the commit message only, you need do nothing. If you are changing the file contents, typically you would modify the working directory and use `git add` as normal.

Note if you wish to restore a file to a known good state, you can use `git checkout GOODSHA -- path/to/filename`.

Once the index is in the correct state, then you can run `git commit --amend` to update the last commit. Yes, you can use "-a" if you want to avoid the `git add` suggested in the previous paragraph.

If the commit you are updating is a merge commit, ensure that the log message reflects that.

!! Put the remaining commits after the new one you just created

<$macrocall $name="git-cmd" branch={{$:/data/BranchName!!branch}}/>

!! Validate that the topology is still good

If some of the commits after the commit you changed are merge commits, please be warned. It is possible that `git rebase -p` will be unable to properly recreate them. Please inspect the resulting merge topology `gitk --date-order HEAD ORIG_HEAD` to ensure that git did want you wanted. If it did not, there is not really any automated recourse. You can reset back to the commit before the SHA you want to get rid of, and then cherry-pick the normal commits and manually re-merge the "bad" merges. Or you can just suffer with the inappropriate topology (perhaps creating fake merges `git merge --ours otherbranch` so that subsequent development work on those branches will be properly merged in with the correct merge-base).

!! Delete the nonce branch

You don't need it. It was just there to communicate an SHA between two steps in the above process. `git branch -d nonce`
